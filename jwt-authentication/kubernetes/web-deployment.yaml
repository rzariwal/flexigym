apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.prod.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: web
  name: web
spec:
  replicas: 2
  selector:
    matchLabels:
      io.kompose.service: web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.prod.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: web
    spec:
      containers:
        - name: web
          image: asia.gcr.io/PROJECT_ID/IMAGE:TAG
          imagePullPolicy: "Always"
          ports:
            - containerPort: 5000
          args:
            - gunicorn
            - --bind
            - 0.0.0.0:5000
            - manage:app
          env:
          - name: DATABASE
            valueFrom:
              configMapKeyRef:
                key: DATABASE
                name: env-prod
          - name: DATABASE_URL
            valueFrom:
              configMapKeyRef:
                key: DATABASE_URL
                name: env-prod
          - name: FLASK_APP
            valueFrom:
              configMapKeyRef:
                key: FLASK_APP
                name: env-prod
          - name: FLASK_ENV
            valueFrom:
              configMapKeyRef:
                key: FLASK_ENV
                name: env-prod
          - name: SQL_HOST
            valueFrom:
              configMapKeyRef:
                key: SQL_HOST
                name: env-prod
          - name: SQL_PORT
            valueFrom:
              configMapKeyRef:
                key: SQL_PORT
                name: env-prod
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: cloudsql-db-credentials
                key: username
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                name: cloudsql-db-credentials
                key: password
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: cloudsql-db-credentials
                key: dbname
          readinessProbe:
            httpGet:
              path: /swagger/index.html
              port: 5000
            timeoutSeconds: 2
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances=flexigym-278301:asia-southeast1:postgres-authentication=tcp:5432",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: my-secrets-volume
              mountPath: /secrets/cloudsql
              readOnly: true
          resources: {}
      volumes:
        - name: my-secrets-volume
          secret:
            secretName: cloudsql-instance-credentials
status: {}
